// Generated by jextract

package de.birgitkratz.sudokusolver.jextract;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;

/**
 * {@snippet lang=c :
 * struct sudoku {
 *     uint8_t *a;
 *     uint8_t N;
 *     uint8_t N2;
 * }
 * }
 */
public class sudoku {

    sudoku() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sudokusolver_h.C_POINTER.withName("a"),
        sudokusolver_h.C_CHAR.withName("N"),
        sudokusolver_h.C_CHAR.withName("N2"),
        MemoryLayout.paddingLayout(6)
    ).withName("sudoku");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout a$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *a
     * }
     */
    public static final AddressLayout a$layout() {
        return a$LAYOUT;
    }

    private static final long a$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *a
     * }
     */
    public static final long a$offset() {
        return a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *a
     * }
     */
    public static MemorySegment a(MemorySegment struct) {
        return struct.get(a$LAYOUT, a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *a
     * }
     */
    public static void a(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(a$LAYOUT, a$OFFSET, fieldValue);
    }

    private static final OfByte N$LAYOUT = (OfByte)$LAYOUT.select(groupElement("N"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t N
     * }
     */
    public static final OfByte N$layout() {
        return N$LAYOUT;
    }

    private static final long N$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t N
     * }
     */
    public static final long N$offset() {
        return N$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t N
     * }
     */
    public static byte N(MemorySegment struct) {
        return struct.get(N$LAYOUT, N$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t N
     * }
     */
    public static void N(MemorySegment struct, byte fieldValue) {
        struct.set(N$LAYOUT, N$OFFSET, fieldValue);
    }

    private static final OfByte N2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("N2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t N2
     * }
     */
    public static final OfByte N2$layout() {
        return N2$LAYOUT;
    }

    private static final long N2$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t N2
     * }
     */
    public static final long N2$offset() {
        return N2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t N2
     * }
     */
    public static byte N2(MemorySegment struct) {
        return struct.get(N2$LAYOUT, N2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t N2
     * }
     */
    public static void N2(MemorySegment struct, byte fieldValue) {
        struct.set(N2$LAYOUT, N2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

